name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact: dev
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact: dev
            cross: true
          # macOS builds  
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: dev
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: dev
          # Windows build
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: dev.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install musl tools (Linux)
        if: matrix.os == 'ubuntu-latest' && !matrix.cross
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src/rs/target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Build with cross
        if: matrix.cross
        run: |
          cd src/rs
          cross build --release --target ${{ matrix.target }} --bin dev --bin dev-tui --bin dev-exec

      - name: Build native
        if: ${{ !matrix.cross }}
        run: |
          cd src/rs
          cargo build --release --target ${{ matrix.target }} --bin dev --bin dev-tui --bin dev-exec

      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd src/rs/target/${{ matrix.target }}/release
          tar czf ../../../../dev-${{ matrix.target }}.tar.gz dev dev-tui dev-exec
          cd ../../../../
          ls -la dev-*.tar.gz

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd src/rs/target/${{ matrix.target }}/release
          Compress-Archive -Path dev.exe,dev-tui.exe,dev-exec.exe -DestinationPath ../../../../dev-${{ matrix.target }}.zip
          cd ../../../../
          Get-ChildItem dev-*.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dev-${{ matrix.target }}
          path: |
            dev-${{ matrix.target }}.tar.gz
            dev-${{ matrix.target }}.zip

  release:
    name: Create Release and Publish
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List artifacts
        run: |
          ls -la
          for dir in dev-*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done

      - name: Prepare npm package
        run: |
          # Create bin directory
          mkdir -p src/ts/bin
          
          # Extract and place binaries
          echo "Extracting Linux x64..."
          tar xzf dev-x86_64-unknown-linux-musl/dev-x86_64-unknown-linux-musl.tar.gz
          mv dev src/ts/bin/dev-x86_64-unknown-linux-musl
          
          echo "Extracting Linux arm64..."
          tar xzf dev-aarch64-unknown-linux-musl/dev-aarch64-unknown-linux-musl.tar.gz
          mv dev src/ts/bin/dev-aarch64-unknown-linux-musl
          
          echo "Extracting macOS x64..."
          tar xzf dev-x86_64-apple-darwin/dev-x86_64-apple-darwin.tar.gz
          mv dev src/ts/bin/dev-x86_64-apple-darwin
          
          echo "Extracting macOS arm64..."
          tar xzf dev-aarch64-apple-darwin/dev-aarch64-apple-darwin.tar.gz
          mv dev src/ts/bin/dev-aarch64-apple-darwin
          
          echo "Extracting Windows x64..."
          unzip -o dev-x86_64-pc-windows-msvc/dev-x86_64-pc-windows-msvc.zip
          mv dev.exe src/ts/bin/dev-x86_64-pc-windows-msvc.exe
          
          # Make binaries executable
          chmod +x src/ts/bin/dev-*
          
          # List final structure
          echo "Final bin directory:"
          ls -la src/ts/bin/

      - name: Update package version
        run: |
          cd src/ts
          # Update version in package.json
          npm version ${{ steps.get_version.outputs.version }} --no-git-tag-version --allow-same-version
          
          # Verify the change
          echo "Package.json version:"
          grep version package.json

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Hanzo Dev v${{ steps.get_version.outputs.version }}
          body: |
            ## Installation

            ### Via npm (recommended)
            ```bash
            npm install -g @hanzo/dev
            ```

            ### Direct download
            Download the appropriate binary for your platform:
            - **Linux x64**: `dev-x86_64-unknown-linux-musl.tar.gz`
            - **Linux arm64**: `dev-aarch64-unknown-linux-musl.tar.gz`
            - **macOS Intel**: `dev-x86_64-apple-darwin.tar.gz`
            - **macOS Apple Silicon**: `dev-aarch64-apple-darwin.tar.gz`
            - **Windows x64**: `dev-x86_64-pc-windows-msvc.zip`

            Extract and add to your PATH.

            ### What's New
            See [CHANGELOG.md](https://github.com/hanzoai/dev/blob/main/CHANGELOG.md) for details.
          files: |
            dev-*/dev-*.tar.gz
            dev-*/dev-*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: |
          cd src/ts
          
          # Check if version already exists
          VERSION=${{ steps.get_version.outputs.version }}
          if npm view @hanzo/dev@$VERSION version 2>/dev/null; then
            echo "Version $VERSION already published, skipping..."
          else
            echo "Publishing @hanzo/dev@$VERSION to npm..."
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-platform-packages:
    name: Publish platform packages
    needs: [build, release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        include:
          - platform: darwin-arm64
            target: aarch64-apple-darwin
            os: darwin
            cpu: arm64
          - platform: darwin-x64
            target: x86_64-apple-darwin
            os: darwin
            cpu: x64
          - platform: linux-x64
            target: x86_64-unknown-linux-musl
            os: linux
            cpu: x64
          - platform: linux-arm64
            target: aarch64-unknown-linux-musl
            os: linux
            cpu: arm64
          - platform: win32-x64
            target: x86_64-pc-windows-msvc
            os: win32
            cpu: x64

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dev-${{ matrix.target }}

      - name: Create platform package
        run: |
          mkdir -p platform-package/bin
          
          # Extract binary
          if [[ "${{ matrix.platform }}" == "win32-x64" ]]; then
            unzip -o dev-${{ matrix.target }}.zip
            mv dev.exe platform-package/bin/dev-${{ matrix.target }}.exe
          else
            tar xzf dev-${{ matrix.target }}.tar.gz
            mv dev platform-package/bin/dev-${{ matrix.target }}
            chmod +x platform-package/bin/dev-${{ matrix.target }}
          fi
          
          # Create package.json
          cat > platform-package/package.json <<EOF
          {
            "name": "@hanzo/dev-${{ matrix.platform }}",
            "version": "${{ steps.get_version.outputs.version }}",
            "description": "Hanzo Dev CLI - ${{ matrix.platform }} binary",
            "license": "Apache-2.0",
            "repository": {
              "type": "git",
              "url": "https://github.com/hanzoai/dev.git"
            },
            "files": ["bin"],
            "os": ["${{ matrix.os }}"],
            "cpu": ["${{ matrix.cpu }}"],
            "engines": {
              "node": ">=16.0.0"
            }
          }
          EOF
          
          echo "Package contents:"
          ls -la platform-package/
          ls -la platform-package/bin/

      - name: Publish platform package
        run: |
          cd platform-package
          VERSION=${{ steps.get_version.outputs.version }}
          PKG_NAME="@hanzo/dev-${{ matrix.platform }}"
          
          # Check if already published
          if npm view "${PKG_NAME}@${VERSION}" version 2>/dev/null; then
            echo "Version ${VERSION} of ${PKG_NAME} already published, skipping..."
          else
            echo "Publishing ${PKG_NAME}@${VERSION}..."
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true